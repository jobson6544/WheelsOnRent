# Generated by Selenium IDE
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException
import sys

class TestVendorlogin():
    def setup_method(self, method):
        print("\n\033[94m=== Starting Vendor Login Test ===\033[0m")  # Blue color
        try:
            self.driver = webdriver.Chrome()
            print("\033[92m✓ Browser initialized successfully\033[0m")  # Green color
        except WebDriverException as e:
            print(f"\033[91m✗ Failed to initialize browser: {str(e)}\033[0m")  # Red color
            raise
        self.vars = {}
  
    def teardown_method(self, method):
        try:
            self.driver.quit()
            print("\033[92m✓ Browser closed successfully\033[0m")
        except Exception as e:
            print(f"\033[91m✗ Failed to close browser: {str(e)}\033[0m")
        print("\033[94m=== Vendor Login Test Completed ===\033[0m")
  
    def test_vendorlogin(self):
        try:
            # Navigate to homepage
            self.driver.get("http://127.0.0.1:8000/")
            print("\033[92m✓ Navigated to homepage\033[0m")
            
            # Set window size
            self.driver.set_window_size(1552, 832)
            print("\033[92m✓ Window size set\033[0m")
            
            # Click vendor login link
            self.driver.find_element(By.LINK_TEXT, "Vendor Login").click()
            print("\033[92m✓ Clicked vendor login link\033[0m")
            
            # Enter email
            email_field = self.driver.find_element(By.ID, "email")
            email_field.click()
            email_field.send_keys("vendor@gmail.com")
            print("\033[92m✓ Entered email\033[0m")
            
            # Enter password
            password_field = self.driver.find_element(By.ID, "password")
            password_field.send_keys("Jobzz@6544")
            print("\033[92m✓ Entered password\033[0m")
            
            # Click login button
            self.driver.find_element(By.CSS_SELECTOR, "button").click()
            print("\033[92m✓ Clicked login button\033[0m")
            
            # Wait for login to complete and verify success
            try:
                menu_item = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".d-md-block"))
                )
                print("\033[92m✓ Login successful - Menu found\033[0m")
                
                # Click menu item
                menu_item.click()
                print("\033[92m✓ Clicked menu item\033[0m")
                
                # Click logout
                self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(5) span").click()
                print("\033[92m✓ Clicked logout\033[0m")
                
                print("\n\033[92m✓ TEST PASSED: Vendor login and logout completed successfully\033[0m")
                
            except Exception as e:
                print(f"\033[91m✗ Login verification failed: {str(e)}\033[0m")
                raise
                
        except Exception as e:
            print(f"\n\033[91m✗ TEST FAILED: {str(e)}\033[0m")
            # Take screenshot on failure
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            self.driver.save_screenshot(f'test_failure_{timestamp}.png')
            print(f"\033[93mScreenshot saved as test_failure_{timestamp}.png\033[0m")
            raise

def run_test():
    """Function to run the test and handle exceptions"""
    test = TestVendorlogin()
    try:
        test.setup_method(None)
        test.test_vendorlogin()
        return True
    except Exception as e:
        print(f"\n\033[91mTest execution failed: {str(e)}\033[0m")
        return False
    finally:
        test.teardown_method(None)

if __name__ == "__main__":
    success = run_test()
    if success:
        print("\n\033[92mAll tests completed successfully!\033[0m")
        sys.exit(0)
    else:
        print("\n\033[91mTest execution failed!\033[0m")
        sys.exit(1)