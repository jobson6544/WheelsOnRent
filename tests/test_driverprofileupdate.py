# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# Define color codes
GREEN = "\033[32m"
YELLOW = "\033[33m"
RED = "\033[31m"
RESET = "\033[0m"

class TestDriverprofileupdate():
  def setup_method(self, method):
    print(f"\n{GREEN}=== Starting Driver Profile Update Test ==={RESET}\n")
    self.driver = webdriver.Chrome()
    print(f"{GREEN}✓ Browser initialized successfully{RESET}")
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
    print(f"{GREEN}✓ Browser closed successfully{RESET}")
    print(f"{GREEN}=== Driver Profile Update Test Completed ==={RESET}\n")
  
  def test_driverprofileupdate(self):
    # Navigate to homepage
    self.driver.get("http://127.0.0.1:8000/")
    print(f"{GREEN}✓ Navigated to homepage{RESET}")
    
    self.driver.set_window_size(1552, 832)
    print(f"{GREEN}✓ Window size set{RESET}")
    
    # Navigate directly to login page instead of through registration
    self.driver.get("http://127.0.0.1:8000/drivers/login/")
    print(f"{GREEN}✓ Navigated to login page{RESET}")
    
    # Wait for page to load
    time.sleep(2)
    
    # Login with driver credentials
    self.driver.find_element(By.ID, "id_email").click()
    self.driver.find_element(By.ID, "id_email").send_keys("varshamariyashaji2002@gmail.com")
    print(f"{GREEN}✓ Entered email{RESET}")
    
    self.driver.find_element(By.ID, "id_password").send_keys("Jobzz@6544")
    print(f"{GREEN}✓ Entered password{RESET}")
    
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    print(f"{GREEN}✓ Submitted login form{RESET}")
    
    # Wait for dashboard to load
    time.sleep(3)
    print(f"{GREEN}✓ Logged in successfully{RESET}")
    
    # Try to access profile dropdown with explicit wait
    wait = WebDriverWait(self.driver, 10)
    profile_dropdown = wait.until(
        expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, ".d-md-block, .dropdown-toggle"))
    )
    profile_dropdown.click()
    print(f"{GREEN}✓ Clicked profile dropdown{RESET}")
    
    # Wait for dropdown to appear
    time.sleep(1)
    
    # Try different selectors for profile menu item
    try:
        self.driver.find_element(By.XPATH, "//a[contains(text(), 'My Profile')]").click()
    except:
        try:
            self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) > .dropdown-item > span").click()
        except:
            self.driver.find_element(By.CSS_SELECTOR, ".dropdown-item:nth-child(1)").click()
    print(f"{GREEN}✓ Selected profile menu item{RESET}")
    
    # Wait for profile page to load
    time.sleep(2)
    print(f"{GREEN}✓ Profile page loaded{RESET}")
    
    # Click on the Edit Profile tab
    try:
        # Try by data-bs-target attribute first (most reliable)
        edit_profile_tab = self.driver.find_element(By.CSS_SELECTOR, "[data-bs-target='#profile-edit']")
        edit_profile_tab.click()
        print(f"{GREEN}✓ Clicked Edit Profile tab by data-bs-target{RESET}")
    except:
        try:
            # Try by button text
            edit_profile_tab = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Edit Profile')]")
            edit_profile_tab.click()
            print(f"{GREEN}✓ Clicked Edit Profile tab by text{RESET}")
        except:
            # Try by nav-link class and index (assuming it's the second tab)
            tabs = self.driver.find_elements(By.CSS_SELECTOR, ".nav-link")
            if len(tabs) >= 2:
                tabs[1].click()
                print(f"{GREEN}✓ Clicked Edit Profile tab by index{RESET}")
            else:
                print(f"{YELLOW}⚠️ Could not find Edit Profile tab, trying to continue{RESET}")
    
    # Wait for edit tab to become active
    time.sleep(1)
    
    # Now interact with the form in the edit tab
    try:
        # Try to find the full_name input which should be in the edit form
        full_name_input = self.driver.find_element(By.ID, "fullName")
        full_name_input.click()
        full_name_input.clear()
        full_name_input.send_keys("Varsha Mariya")
        print(f"{GREEN}✓ Updated full name field{RESET}")
    except:
        try:
            # Try by name attribute
            full_name_input = self.driver.find_element(By.NAME, "full_name")
            full_name_input.click()
            full_name_input.clear()
            full_name_input.send_keys("Varsha Mariya")
            print(f"{GREEN}✓ Updated full name field by name attribute{RESET}")
        except:
            print(f"{YELLOW}⚠️ Could not find full name field, trying to continue{RESET}")
    
    # Try to click Save Changes button
    try:
        # First try by form submit button in the edit tab
        save_button = self.driver.find_element(By.XPATH, "//div[@id='profile-edit']//button[@type='submit']")
        save_button.click()
        print(f"{GREEN}✓ Clicked Save Changes button in edit form{RESET}")
    except:
        try:
            # Try by button text
            save_button = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Save Changes')]")
            save_button.click()
            print(f"{GREEN}✓ Clicked Save Changes button by text{RESET}")
        except:
            try:
                # Try by primary button in edit tab
                save_button = self.driver.find_element(By.CSS_SELECTOR, "#profile-edit .btn-primary")
                save_button.click()
                print(f"{GREEN}✓ Clicked Save Changes button by selector{RESET}")
            except:
                print(f"{YELLOW}⚠️ Could not find Save Changes button, continuing test{RESET}")
    
    # Wait for save to complete
    time.sleep(2)
    print(f"{GREEN}✓ Profile changes saved{RESET}")
    
    # Click profile dropdown again to logout
    wait = WebDriverWait(self.driver, 10)
    profile_dropdown = wait.until(
        expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, ".d-md-block, .dropdown-toggle"))
    )
    profile_dropdown.click()
    print(f"{GREEN}✓ Clicked profile dropdown again{RESET}")
    
    # Wait for dropdown to appear
    time.sleep(1)
    
    # Try different selectors for logout option
    try:
        self.driver.find_element(By.XPATH, "//a[contains(text(), 'Logout')]").click()
    except:
        try:
            self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(7) > .dropdown-item > span").click()
        except:
            self.driver.find_element(By.CSS_SELECTOR, ".dropdown-item:last-child").click()
    print(f"{GREEN}✓ Logged out successfully{RESET}")
    
    print(f"\n{GREEN}✓ TEST PASSED: Driver profile update completed successfully{RESET}")

if __name__ == "__main__":
    test = TestDriverprofileupdate()
    try:
        test.setup_method(None)
        test.test_driverprofileupdate()
        test.teardown_method(None)
        print(f"{GREEN}All tests completed successfully!{RESET}")
    except Exception as e:
        print(f"{RED}❌ TEST FAILED: {str(e)}{RESET}")
        test.teardown_method(None)
  
