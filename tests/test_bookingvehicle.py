# Generated by Selenium IDE
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException
import sys

class TestBookingvehicle():
    def setup_method(self, method):
        print("\n\033[94m=== Starting Vehicle Booking Test ===\033[0m")  # Blue color
        try:
            self.driver = webdriver.Chrome()
            print("\033[92m✓ Browser initialized successfully\033[0m")  # Green color
        except WebDriverException as e:
            print(f"\033[91m✗ Failed to initialize browser: {str(e)}\033[0m")  # Red color
            raise
        self.vars = {}
  
    def teardown_method(self, method):
        try:
            self.driver.quit()
            print("\033[92m✓ Browser closed successfully\033[0m")
        except Exception as e:
            print(f"\033[91m✗ Failed to close browser: {str(e)}\033[0m")
        print("\033[94m=== Vehicle Booking Test Completed ===\033[0m")
  
    def test_bookingvehicle(self):
        try:
            # Navigate to homepage
            self.driver.get("http://127.0.0.1:8000/")
            print("\033[92m✓ Navigated to homepage\033[0m")
            
            # Set window size
            self.driver.set_window_size(1552, 832)
            print("\033[92m✓ Window size set\033[0m")
            
            # Hover over Home link
            home_element = self.driver.find_element(By.LINK_TEXT, "Home")
            actions = ActionChains(self.driver)
            actions.move_to_element(home_element).perform()
            print("\033[92m✓ Hovered over Home link\033[0m")
            
            # Click login link
            self.driver.find_element(By.LINK_TEXT, "Login").click()
            print("\033[92m✓ Clicked login link\033[0m")
            
            # Login process
            email_field = self.driver.find_element(By.ID, "email")
            email_field.click()
            email_field.send_keys("affair-veal-ovary@duck.com")
            print("\033[92m✓ Entered email\033[0m")
            
            password_field = self.driver.find_element(By.ID, "password")
            password_field.send_keys("Jobzz@6544")
            print("\033[92m✓ Entered password\033[0m")
            
            self.driver.find_element(By.CSS_SELECTOR, "button").click()
            print("\033[92m✓ Clicked login button\033[0m")
            
            # Wait for page to load after login
            time.sleep(2)
            
            try:
                # Find and scroll to Book Now button
                book_now = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.LINK_TEXT, "Book Now"))
                )
                # Scroll the button into view
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", book_now)
                time.sleep(1)  # Wait for scroll to complete
                print("\033[92m✓ Scrolled to Book Now button\033[0m")
                
                # Click Book Now using JavaScript
                self.driver.execute_script("arguments[0].click();", book_now)
                print("\033[92m✓ Clicked Book Now\033[0m")
                
                # Wait for booking form and handle dates
                time.sleep(2)
                
                # Handle start date
                start_date = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.ID, "start_date"))
                )
                start_date.clear()
                actions = ActionChains(self.driver)
                actions.move_to_element(start_date).click().send_keys("27-11-2024").perform()
                print("\033[92m✓ Entered start date\033[0m")
                
                # Handle end date
                end_date = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.ID, "end_date"))
                )
                end_date.clear()
                actions = ActionChains(self.driver)
                actions.move_to_element(end_date).click().send_keys("28-11-2024").perform()
                print("\033[92m✓ Entered end date\033[0m")
                
                # Find and click the proceed button
                proceed_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, ".btn-primary"))
                )
                proceed_button.click()
                print("\033[92m✓ Clicked proceed button\033[0m")
                
                # Wait for checkout button and click
                checkout_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "checkout-button"))
                )
                checkout_button.click()
                print("\033[92m✓ Clicked checkout button\033[0m")
                
                # Handle payment
                try:
                    # Enter email
                    email_field = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.NAME, "email"))
                    )
                    email_field.send_keys("test@example.com")
                    print("\033[92m✓ Entered payment email\033[0m")

                    # Enter card details
                    card_field = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.NAME, "cardNumber"))
                    )
                    card_field.send_keys("4242424242424242")
                    print("\033[92m✓ Entered card number\033[0m")

                    # Enter expiry date
                    expiry_field = self.driver.find_element(By.NAME, "cardExpiry") 
                    expiry_field.send_keys("1225")
                    print("\033[92m✓ Entered card expiry\033[0m")

                    # Enter CVC
                    cvc_field = self.driver.find_element(By.NAME, "cardCvc")
                    cvc_field.send_keys("123")
                    print("\033[92m✓ Entered CVC\033[0m")
                    # Enter customer name
                    name_field = WebDriverWait(self.driver, 10).until(
                        EC.presence_of_element_located((By.NAME, "name"))
                    )
                    name_field.send_keys("Test Customer")
                    print("\033[92m✓ Entered customer name\033[0m")

                    # Click payment button
                    payment_button = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, ".SubmitButton-IconContainer"))
                    )
                    payment_button.click()
                    print("\033[92m✓ Submitted payment\033[0m")
                except Exception as e:
                    print("\033[93m⚠ Payment form handling failed: {str(e)}\033[0m")
                # Confirm booking
                confirm_button = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, ".btn-primary"))
                )
                confirm_button.click()
                print("\033[92m✓ Confirmed booking\033[0m")
                
                # Logout
                logout_link = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.LINK_TEXT, "Logout"))
                )
                logout_link.click()
                print("\033[92m✓ Logged out successfully\033[0m")
                
                print("\n\033[92m✓ TEST PASSED: Vehicle booking completed successfully\033[0m")
                
            except Exception as e:
                print(f"\033[91m✗ Booking process failed: {str(e)}\033[0m")
                raise
                
        except Exception as e:
            print(f"\n\033[91m✗ TEST FAILED: {str(e)}\033[0m")
            # Take screenshot on failure
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            self.driver.save_screenshot(f'test_failure_{timestamp}.png')
            print(f"\033[93mScreenshot saved as test_failure_{timestamp}.png\033[0m")
            raise

def run_test():
    """Function to run the test and handle exceptions"""
    test = TestBookingvehicle()
    try:
        test.setup_method(None)
        test.test_bookingvehicle()
        return True
    except Exception as e:
        print(f"\n\033[91mTest execution failed: {str(e)}\033[0m")
        return False
    finally:
        test.teardown_method(None)

if __name__ == "__main__":
    success = run_test()
    if success:
        print("\n\033[92mAll tests completed successfully!\033[0m")
        sys.exit(0)
    else:
        print("\n\033[91mTest execution failed!\033[0m")
        sys.exit(1)
